error: this opening tag has no corresponding closing tag
 --> $DIR/html-tag-fail.rs:6:13
  |
6 |     html! { <div> };
  |             ^^^^^

error: this opening tag has no corresponding closing tag
 --> $DIR/html-tag-fail.rs:7:18
  |
7 |     html! { <div><div> };
  |                  ^^^^^

error: this closing tag has no corresponding opening tag
 --> $DIR/html-tag-fail.rs:8:13
  |
8 |     html! { </div> };
  |             ^^^^^^

error: this opening tag has no corresponding closing tag
 --> $DIR/html-tag-fail.rs:9:13
  |
9 |     html! { <div><div></div> };
  |             ^^^^^

error: only one root html element is allowed (hint: you can wrap multiple html elements in a fragment `<></>`)
  --> $DIR/html-tag-fail.rs:32:24
   |
32 |     html! { <div></div><div></div> };
   |                        ^^^^^^^^^^^

error: this closing tag has no corresponding opening tag
  --> $DIR/html-tag-fail.rs:33:18
   |
33 |     html! { <div></span> };
   |                  ^^^^^^^

error: this closing tag has no corresponding opening tag
  --> $DIR/html-tag-fail.rs:34:20
   |
34 |     html! { <tag-a></tag-b> };
   |                    ^^^^^^^^

error: this closing tag has no corresponding opening tag
  --> $DIR/html-tag-fail.rs:35:18
   |
35 |     html! { <div></span></div> };
   |                  ^^^^^^^

error: only one root html element is allowed (hint: you can wrap multiple html elements in a fragment `<></>`)
  --> $DIR/html-tag-fail.rs:36:20
   |
36 |     html! { <img /></img> };
   |                    ^^^^^^

error: expected a valid html element
  --> $DIR/html-tag-fail.rs:37:18
   |
37 |     html! { <div>Invalid</div> };
   |                  ^^^^^^^

error: the attribute `attr` can only be specified once
  --> $DIR/html-tag-fail.rs:39:27
   |
39 |     html! { <input attr=1 attr=2 /> };
   |                           ^^^^

error: the attribute `value` can only be specified once
  --> $DIR/html-tag-fail.rs:40:32
   |
40 |     html! { <input value="123" value="456" /> };
   |                                ^^^^^

error: the attribute `kind` can only be specified once
  --> $DIR/html-tag-fail.rs:41:36
   |
41 |     html! { <input kind="checkbox" kind="submit" /> };
   |                                    ^^^^

error: the attribute `checked` can only be specified once
  --> $DIR/html-tag-fail.rs:42:33
   |
42 |     html! { <input checked=true checked=false /> };
   |                                 ^^^^^^^

error: the attribute `disabled` can only be specified once
  --> $DIR/html-tag-fail.rs:43:34
   |
43 |     html! { <input disabled=true disabled=false /> };
   |                                  ^^^^^^^^

error: the attribute `selected` can only be specified once
  --> $DIR/html-tag-fail.rs:44:35
   |
44 |     html! { <option selected=true selected=false /> };
   |                                   ^^^^^^^^

error: the attribute `class` can only be specified once
  --> $DIR/html-tag-fail.rs:45:32
   |
45 |     html! { <div class="first" class="second" /> };
   |                                ^^^^^

error: the attribute `ref` can only be specified once
  --> $DIR/html-tag-fail.rs:60:27
   |
60 |     html! { <input ref=() ref=() /> };
   |                           ^^^

error: the tag `<input>` is a void element and cannot have children (hint: rewrite this as `<input/>`)
  --> $DIR/html-tag-fail.rs:62:13
   |
62 |     html! { <input type="text"></input> };
   |             ^^^^^^^^^^^^^^^^^^^

error: the tag `<iNpUt>` is a void element and cannot have children (hint: rewrite this as `<iNpUt/>`)
  --> $DIR/html-tag-fail.rs:63:13
   |
63 |     html! { <iNpUt type="text"></iNpUt> };
   |             ^^^^^^^^^^^^^^^^^^^

error: this dynamic tag is missing an expression block defining its value
  --> $DIR/html-tag-fail.rs:65:14
   |
65 |     html! { <@></@> };
   |              ^

error: dynamic closing tags must not have a body (hint: replace it with just `</@>`)
  --> $DIR/html-tag-fail.rs:66:27
   |
66 |     html! { <@{"test"}></@{"test"}> };
   |                           ^^^^^^^^

error: this dynamic tag is missing an expression block defining its value
  --> $DIR/html-tag-fail.rs:68:14
   |
68 |     html! { <@/> };
   |              ^

error: The 'disabled' attribute does not support being used as an optional attribute
  --> $DIR/html-tag-fail.rs:72:20
   |
72 |     html! { <input disabled?=Some(true) /> };
   |                    ^^^^^^^^
   |
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: The 'checked' attribute does not support being used as an optional attribute
  --> $DIR/html-tag-fail.rs:80:20
   |
80 |     html! { <input checked?=Some(false) /> };
   |                    ^^^^^^^
   |
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: The 'class' attribute does not support being used as an optional attribute
  --> $DIR/html-tag-fail.rs:81:20
   |
81 |     html! { <input class?=() /> };
   |                    ^^^^^
   |
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: The 'ref' attribute does not support being used as an optional attribute
  --> $DIR/html-tag-fail.rs:82:20
   |
82 |     html! { <input ref?=() /> };
   |                    ^^^
   |
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error: optional attributes are only supported on HTML tags. Yew components can use `Option<T>` properties to accomplish the same thing.
  --> $DIR/html-tag-fail.rs:86:28
   |
86 |     html! { <TestComponent value?="not_supported" /> };
   |                            ^^^^^
   |
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:47:28
   |
47 |     html! { <input checked=1 /> };
   |                            ^ expected `bool`, found integer

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:48:29
   |
48 |     html! { <input disabled=1 /> };
   |                             ^ expected `bool`, found integer

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:49:30
   |
49 |     html! { <option selected=1 /> };
   |                              ^ expected `bool`, found integer

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> $DIR/html-tag-fail.rs:50:25
   |
50 |     html! { <input type=() /> };
   |                         ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `()`
   = note: required by `std::string::ToString::to_string`

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> $DIR/html-tag-fail.rs:51:26
   |
51 |     html! { <input value=() /> };
   |                          ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `()`

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> $DIR/html-tag-fail.rs:30:21
   |
30 |     html! { <a href=() /> };
   |                     ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `()`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:54:20
   |
54 |     html! { <input onclick=1 /> };
   |                    ^^^^^^^ expected enum `yew::callback::Callback`, found integer
   |
   = note: expected enum `yew::callback::Callback<web_sys::features::gen_MouseEvent::MouseEvent>`
              found type `{integer}`

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:55:20
   |
55 |     html! { <input onclick=Callback::from(|a: String| ()) /> };
   |                    ^^^^^^^ expected struct `web_sys::features::gen_MouseEvent::MouseEvent`, found struct `std::string::String`
   |
   = note: expected enum `yew::callback::Callback<web_sys::features::gen_MouseEvent::MouseEvent>`
              found enum `yew::callback::Callback<std::string::String>`

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
  --> $DIR/html-tag-fail.rs:35:27
   |
35 |     html! { <input string=NotToString /> };
   |                           ^^^^^^^^^^^ `NotToString` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NotToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:59:24
   |
59 |     html! { <input ref=() /> };
   |                        ^^ expected struct `yew::html::NodeRef`, found `()`

error[E0277]: the trait bound `std::borrow::Cow<'static, str>: std::convert::From<{integer}>` is not satisfied
  --> $DIR/html-tag-fail.rs:67:15
   |
67 |     html! { <@{55}></@> };
   |               ^^^^ the trait `std::convert::From<{integer}>` is not implemented for `std::borrow::Cow<'static, str>`
   |
   = help: the following implementations were found:
             <std::borrow::Cow<'a, [T]> as std::convert::From<&'a [T]>>
             <std::borrow::Cow<'a, [T]> as std::convert::From<&'a std::vec::Vec<T>>>
             <std::borrow::Cow<'a, [T]> as std::convert::From<std::vec::Vec<T>>>
             <std::borrow::Cow<'a, std::ffi::CStr> as std::convert::From<&'a std::ffi::CStr>>
           and 11 others
   = note: required by `std::convert::From::from`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:70:23
   |
70 |     html! { <a media?="media" /> };
   |                       ^^^^^^^ expected enum `std::option::Option`, found `&str`
   |
   = note: expected reference `&std::option::Option<_>`
              found reference `&&'static str`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
    --> $DIR/html-tag-fail.rs:71:23
     |
71   |     html! { <a media?=Some(NotToString) /> };
     |                       ^^^^ `NotToString` cannot be formatted with the default formatter
     |
    ::: $RUST/src/liballoc/string.rs:2158:1
     |
2158 | pub trait ToString {
     | ------------------ required by this bound in `std::string::ToString::to_string`
     |
     = help: the trait `std::fmt::Display` is not implemented for `NotToString`
     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
     = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
     = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:73:26
   |
73 |     html! { <input type?="kind" /> };
   |                          ^^^^^^ expected enum `std::option::Option`, found `&str`
   |
   = note: expected reference `&std::option::Option<_>`
              found reference `&&'static str`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
  --> $DIR/html-tag-fail.rs:74:26
   |
74 |     html! { <input type?=Some(NotToString) /> };
   |                          ^^^^ `NotToString` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NotToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:75:24
   |
75 |     html! { <li value?="value" /> };
   |                        ^^^^^^^ expected enum `std::option::Option`, found `&str`
   |
   = note: expected reference `&std::option::Option<_>`
              found reference `&&'static str`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
    --> $DIR/html-tag-fail.rs:76:24
     |
76   |     html! { <li value?=Some(NotToString) /> };
     |                        ^^^^ `NotToString` cannot be formatted with the default formatter
     |
    ::: $RUST/src/liballoc/string.rs:2158:1
     |
2158 | pub trait ToString {
     | ------------------ required by this bound in `std::string::ToString::to_string`
     |
     = help: the trait `std::fmt::Display` is not implemented for `NotToString`
     = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
     = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
     = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `yew::html::Href: std::convert::From<{integer}>` is not satisfied
  --> $DIR/html-tag-fail.rs:77:22
   |
77 |     html! { <a href?=Some(5) /> };
   |                      ^^^^ the trait `std::convert::From<{integer}>` is not implemented for `yew::html::Href`
   |
   = help: the following implementations were found:
             <yew::html::Href as std::convert::From<&'a str>>
             <yew::html::Href as std::convert::From<std::string::String>>
   = note: required because of the requirements on the impl of `std::convert::Into<yew::html::Href>` for `{integer}`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:78:22
   |
78 |     html! { <a href?="href" /> };
   |                      ^^^^^^
   |                      |
   |                      expected `str`, found enum `std::option::Option`
   |                      this expression has type `&str`
   |
   = note: expected type `str`
              found enum `std::option::Option<_>`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `yew::html::Href: std::convert::From<NotToString>` is not satisfied
  --> $DIR/html-tag-fail.rs:79:22
   |
79 |     html! { <a href?=Some(NotToString) /> };
   |                      ^^^^ the trait `std::convert::From<NotToString>` is not implemented for `yew::html::Href`
   |
   = help: the following implementations were found:
             <yew::html::Href as std::convert::From<&'a str>>
             <yew::html::Href as std::convert::From<std::string::String>>
   = note: required because of the requirements on the impl of `std::convert::Into<yew::html::Href>` for `NotToString`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:83:20
   |
83 |     html! { <input onfocus?=Some(5) /> };
   |                    ^^^^^^^ expected enum `yew::callback::Callback`, found integer
   |
   = note: expected enum `yew::callback::Callback<web_sys::features::gen_FocusEvent::FocusEvent>`
              found type `{integer}`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> $DIR/html-tag-fail.rs:84:29
   |
84 |     html! { <input onfocus?=Callback::from(|_| ()) /> };
   |                             ^^^^^^^^^^^^^^^^^^^^^^
   |                             |
   |                             expected enum `std::option::Option`, found enum `yew::callback::Callback`
   |                             help: try using a variant of the expected enum: `Some(Callback::from(|_| ()))`
   |
   = note: expected enum `std::option::Option<_>`
              found enum `yew::callback::Callback<_>`
   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)
