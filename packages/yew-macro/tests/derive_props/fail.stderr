error: unexpected end of input, expected expression
  --> tests/derive_props/fail.rs:57:19
   |
57 |         #[prop_or()]
   |                   ^

error: cannot find attribute `props` in this scope
  --> tests/derive_props/fail.rs:22:11
   |
22 |         #[props(default)]
   |           ^^^^^

error[E0425]: cannot find value `foo` in this scope
  --> tests/derive_props/fail.rs:87:24
   |
87 |         #[prop_or_else(foo)]
   |                        ^^^ not found in this scope
   |
help: consider importing one of these items
   |
83 |     use crate::t10::foo;
   |
83 |     use crate::t9::foo;
   |

error[E0599]: no method named `build` found for struct `t3::PropsBuilder<t3::PropsBuilderStep_missing_required_prop_value>` in the current scope
  --> tests/derive_props/fail.rs:35:26
   |
29 |     #[derive(Clone, Properties, PartialEq)]
   |                     ---------- method `build` not found for this
...
35 |         Props::builder().build();
   |                          ^^^^^ method not found in `t3::PropsBuilder<t3::PropsBuilderStep_missing_required_prop_value>`
   |
   = note: the method was found for
           - `t3::PropsBuilder<t3::PropsBuilderStepPropsBuilder>`

error[E0599]: no method named `b` found for struct `t4::PropsBuilder<PropsBuilderStep_missing_required_prop_a>` in the current scope
  --> tests/derive_props/fail.rs:48:26
   |
41 |     #[derive(Clone, Properties, PartialEq)]
   |                     ---------- method `b` not found for this
...
48 |         Props::builder().b(1).a(2).build();
   |                          ^ help: there is an associated function with a similar name: `a`

error[E0277]: the trait bound `Value: Default` is not satisfied
    --> tests/derive_props/fail.rs:9:21
     |
9    |     #[derive(Clone, Properties, PartialEq)]
     |                     ^^^^^^^^^^ the trait `Default` is not implemented for `Value`
     |
note: required by `Option::<T>::unwrap_or_default`
     = note: this error originates in the derive macro `Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `==` cannot be applied to type `Value`
  --> tests/derive_props/fail.rs:13:9
   |
9  |     #[derive(Clone, Properties, PartialEq)]
   |                                 --------- in this derive macro expansion
...
13 |         value: Value,
   |         ^^^^^^^^^^^^
   |
   = note: an implementation of `std::cmp::PartialEq` might be missing for `Value`
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: binary operation `!=` cannot be applied to type `Value`
  --> tests/derive_props/fail.rs:13:9
   |
9  |     #[derive(Clone, Properties, PartialEq)]
   |                                 --------- in this derive macro expansion
...
13 |         value: Value,
   |         ^^^^^^^^^^^^
   |
   = note: an implementation of `std::cmp::PartialEq` might be missing for `Value`
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/derive_props/fail.rs:67:19
   |
67 |         #[prop_or(123)]
   |                   ^^^ expected struct `String`, found integer
   |
help: try using a conversion method
   |
67 |         #[prop_or(123.to_string())]
   |                      ++++++++++++
67 |         #[prop_or(123.to_string())]
   |                      ++++++++++++

error[E0277]: expected a `FnOnce<()>` closure, found `{integer}`
   --> tests/derive_props/fail.rs:77:24
    |
77  |         #[prop_or_else(123)]
    |                        ^^^ expected an `FnOnce<()>` closure, found `{integer}`
    |
    = help: the trait `FnOnce<()>` is not implemented for `{integer}`
    = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }`
note: required by a bound in `Option::<T>::unwrap_or_else`

error[E0593]: function is expected to take 0 arguments, but it takes 1 argument
   --> tests/derive_props/fail.rs:97:24
    |
97  |         #[prop_or_else(foo)]
    |                        ^^^ expected function that takes 0 arguments
...
101 |     fn foo(bar: i32) -> String {
    |     -------------------------- takes 1 argument
    |
note: required by a bound in `Option::<T>::unwrap_or_else`

error[E0271]: type mismatch resolving `<fn() -> i32 {t10::foo} as FnOnce<()>>::Output == String`
   --> tests/derive_props/fail.rs:111:24
    |
111 |         #[prop_or_else(foo)]
    |                        ^^^ expected struct `String`, found `i32`
    |
note: required by `Option::<T>::unwrap_or_else`
