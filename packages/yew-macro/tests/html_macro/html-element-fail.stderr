error: this opening tag has no corresponding closing tag
 --> $DIR/html-element-fail.rs:6:13
  |
6 |     html! { <div> };
  |             ^^^^^

error: this opening tag has no corresponding closing tag
 --> $DIR/html-element-fail.rs:7:18
  |
7 |     html! { <div><div> };
  |                  ^^^^^

error: this closing tag has no corresponding opening tag
 --> $DIR/html-element-fail.rs:8:13
  |
8 |     html! { </div> };
  |             ^^^^^^

error: this opening tag has no corresponding closing tag
 --> $DIR/html-element-fail.rs:9:13
  |
9 |     html! { <div><div></div> };
  |             ^^^^^

error: only one root html element is allowed (hint: you can wrap multiple html elements in a fragment `<></>`)
  --> $DIR/html-element-fail.rs:10:24
   |
10 |     html! { <div></div><div></div> };
   |                        ^^^^^^^^^^^

error: this closing tag has no corresponding opening tag
  --> $DIR/html-element-fail.rs:11:18
   |
11 |     html! { <div></span> };
   |                  ^^^^^^^

error: this closing tag has no corresponding opening tag
  --> $DIR/html-element-fail.rs:12:20
   |
12 |     html! { <tag-a></tag-b> };
   |                    ^^^^^^^^

error: this closing tag has no corresponding opening tag
  --> $DIR/html-element-fail.rs:13:18
   |
13 |     html! { <div></span></div> };
   |                  ^^^^^^^

error: only one root html element is allowed (hint: you can wrap multiple html elements in a fragment `<></>`)
  --> $DIR/html-element-fail.rs:14:20
   |
14 |     html! { <img /></img> };
   |                    ^^^^^^

error: expected a valid html element
  --> $DIR/html-element-fail.rs:15:18
   |
15 |     html! { <div>Invalid</div> };
   |                  ^^^^^^^

error: `attr` can only be specified once but is given here again
  --> $DIR/html-element-fail.rs:17:27
   |
17 |     html! { <input attr=1 attr=2 /> };
   |                           ^^^^

error: `value` can only be specified once but is given here again
  --> $DIR/html-element-fail.rs:18:32
   |
18 |     html! { <input value="123" value="456" /> };
   |                                ^^^^^

error: `kind` can only be specified once but is given here again
  --> $DIR/html-element-fail.rs:19:36
   |
19 |     html! { <input kind="checkbox" kind="submit" /> };
   |                                    ^^^^

error: `checked` can only be specified once but is given here again
  --> $DIR/html-element-fail.rs:20:33
   |
20 |     html! { <input checked=true checked=false /> };
   |                                 ^^^^^^^

error: `disabled` can only be specified once but is given here again
  --> $DIR/html-element-fail.rs:21:34
   |
21 |     html! { <input disabled=true disabled=false /> };
   |                                  ^^^^^^^^

error: `selected` can only be specified once but is given here again
  --> $DIR/html-element-fail.rs:22:35
   |
22 |     html! { <option selected=true selected=false /> };
   |                                   ^^^^^^^^

error: `class` can only be specified once but is given here again
  --> $DIR/html-element-fail.rs:23:32
   |
23 |     html! { <div class="first" class="second" /> };
   |                                ^^^^^

error: `ref` can only be specified once
  --> $DIR/html-element-fail.rs:38:20
   |
38 |     html! { <input ref=() ref=() /> };
   |                    ^^^

error: the tag `<input>` is a void element and cannot have children (hint: rewrite this as `<input/>`)
  --> $DIR/html-element-fail.rs:40:13
   |
40 |     html! { <input type="text"></input> };
   |             ^^^^^^^^^^^^^^^^^^^

error: the tag `<iNpUt>` is a void element and cannot have children (hint: rewrite this as `<iNpUt/>`)
  --> $DIR/html-element-fail.rs:41:13
   |
41 |     html! { <iNpUt type="text"></iNpUt> };
   |             ^^^^^^^^^^^^^^^^^^^

error: this dynamic tag is missing an expression block defining its value
  --> $DIR/html-element-fail.rs:43:14
   |
43 |     html! { <@></@> };
   |              ^

error: dynamic closing tags must not have a body (hint: replace it with just `</@>`)
  --> $DIR/html-element-fail.rs:44:27
   |
44 |     html! { <@{"test"}></@{"test"}> };
   |                           ^^^^^^^^

error: this dynamic tag is missing an expression block defining its value
  --> $DIR/html-element-fail.rs:46:14
   |
46 |     html! { <@/> };
   |              ^

error: boolean attributes don't support being used as an optional attribute (hint: a value of false results in the attribute not being set)
  --> $DIR/html-element-fail.rs:50:20
   |
50 |     html! { <input disabled?=Some(true) /> };
   |                    ^^^^^^^^

error: `checked` does not support being used as an optional attribute
  --> $DIR/html-element-fail.rs:58:20
   |
58 |     html! { <input checked?=Some(false) /> };
   |                    ^^^^^^^^^

error: `ref` does not support being used as an optional attribute
  --> $DIR/html-element-fail.rs:59:20
   |
59 |     html! { <input ref?=() /> };
   |                    ^^^^^

warning: use of deprecated item 'compile_fail::deprecated_use_of_class': the use of `(...)` with the attribute `class` is deprecated and will be removed in version 0.19. Use the `classes!` macro instead.
  --> $DIR/html-element-fail.rs:63:24
   |
63 |     html! { <div class=("deprecated", "warning") /> };
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(deprecated)]` on by default

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:25:28
   |
25 |     html! { <input checked=1 /> };
   |                            ^ expected `bool`, found integer

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:26:29
   |
26 |     html! { <input disabled=1 /> };
   |                             ^ expected `bool`, found integer

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:27:30
   |
27 |     html! { <option selected=1 /> };
   |                              ^ expected `bool`, found integer

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:28:25
   |
28 |     html! { <input type=() /> };
   |                         ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `()`
   = note: required by `std::string::ToString::to_string`

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:29:26
   |
29 |     html! { <input value=() /> };
   |                          ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `()`

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:30:21
   |
30 |     html! { <a href=() /> };
   |                     ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `()`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:32:28
   |
32 |     html! { <input onclick=1 /> };
   |                            ^ expected enum `yew::callback::Callback`, found integer
   |
   = note: expected enum `yew::callback::Callback<web_sys::features::gen_MouseEvent::MouseEvent>`
              found type `{integer}`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:33:28
   |
33 |     html! { <input onclick=Callback::from(|a: String| ()) /> };
   |                            ^^^^^^^^ expected struct `web_sys::features::gen_MouseEvent::MouseEvent`, found struct `std::string::String`
   |
   = note: expected enum `yew::callback::Callback<web_sys::features::gen_MouseEvent::MouseEvent>`
              found enum `yew::callback::Callback<std::string::String>`

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:35:27
   |
35 |     html! { <input string=NotToString /> };
   |                           ^^^^^^^^^^^ `NotToString` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NotToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:37:24
   |
37 |     html! { <input ref=() /> };
   |                        ^^ expected struct `yew::html::NodeRef`, found `()`

error[E0277]: the trait bound `std::borrow::Cow<'static, str>: std::convert::From<{integer}>` is not satisfied
  --> $DIR/html-element-fail.rs:45:15
   |
45 |     html! { <@{55}></@> };
   |               ^^^^ the trait `std::convert::From<{integer}>` is not implemented for `std::borrow::Cow<'static, str>`
   |
   = help: the following implementations were found:
             <std::borrow::Cow<'a, [T]> as std::convert::From<&'a [T]>>
             <std::borrow::Cow<'a, [T]> as std::convert::From<&'a std::vec::Vec<T>>>
             <std::borrow::Cow<'a, [T]> as std::convert::From<std::vec::Vec<T>>>
             <std::borrow::Cow<'a, std::ffi::CStr> as std::convert::From<&'a std::ffi::CStr>>
           and 11 others
   = note: required because of the requirements on the impl of `std::convert::Into<std::borrow::Cow<'static, str>>` for `{integer}`
   = note: required by `std::convert::Into::into`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:48:23
   |
48 |     html! { <a media?="media" /> };
   |                       ^^^^^^^
   |                       |
   |                       expected enum `std::option::Option`, found `&str`
   |                       help: try using a variant of the expected enum: `Some("media")`
   |
   = note:   expected enum `std::option::Option<_>`
           found reference `&'static str`

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:49:23
   |
49 |     html! { <a media?=Some(NotToString) /> };
   |                       ^^^^ `NotToString` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NotToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:51:26
   |
51 |     html! { <input type?="kind" /> };
   |                          ^^^^^^
   |                          |
   |                          expected enum `std::option::Option`, found `&str`
   |                          help: try using a variant of the expected enum: `Some("kind")`
   |
   = note:   expected enum `std::option::Option<_>`
           found reference `&'static str`

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:52:26
   |
52 |     html! { <input type?=Some(NotToString) /> };
   |                          ^^^^ `NotToString` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NotToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:53:24
   |
53 |     html! { <li value?="value" /> };
   |                        ^^^^^^^
   |                        |
   |                        expected enum `std::option::Option`, found `&str`
   |                        help: try using a variant of the expected enum: `Some("value")`
   |
   = note:   expected enum `std::option::Option<_>`
           found reference `&'static str`

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:54:24
   |
54 |     html! { <li value?=Some(NotToString) /> };
   |                        ^^^^ `NotToString` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NotToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:56:22
   |
56 |     html! { <a href?="href" /> };
   |                      ^^^^^^
   |                      |
   |                      expected enum `std::option::Option`, found `&str`
   |                      help: try using a variant of the expected enum: `Some("href")`
   |
   = note:   expected enum `std::option::Option<_>`
           found reference `&'static str`

error[E0277]: `NotToString` doesn't implement `std::fmt::Display`
  --> $DIR/html-element-fail.rs:57:22
   |
57 |     html! { <a href?=Some(NotToString) /> };
   |                      ^^^^ `NotToString` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NotToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required because of the requirements on the impl of `std::string::ToString` for `NotToString`
   = note: required by `std::string::ToString::to_string`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:60:20
   |
60 |     html! { <input onfocus?=Some(5) /> };
   |                    ^^^^^^^ expected enum `yew::callback::Callback`, found integer
   |
   = note: expected enum `yew::callback::Callback<web_sys::features::gen_FocusEvent::FocusEvent>`
              found type `{integer}`

error[E0308]: mismatched types
  --> $DIR/html-element-fail.rs:61:29
   |
61 |     html! { <input onfocus?=Callback::from(|_| ()) /> };
   |                             ^^^^^^^^^^^^^^^^^^^^^^
   |                             |
   |                             expected enum `std::option::Option`, found enum `yew::callback::Callback`
   |                             help: try using a variant of the expected enum: `Some(Callback::from(|_| ()))`
   |
   = note: expected enum `std::option::Option<_>`
              found enum `yew::callback::Callback<_>`
